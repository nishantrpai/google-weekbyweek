{"version":3,"file":"contentScript.js","mappings":";;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE,yEAAyE;AACzE,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,wBAAwB,YAAY,wBAAwB;AACnH,kDAAkD,yBAAyB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA,uCAAuC,mBAAmB,eAAe;AACzE;AACA;AACA;AACA,sCAAsC;AACtC,wCAAwC,eAAe;AACvD,oEAAoE,cAAc,2BAA2B,mBAAmB;AAChI;AACA;AACA,sCAAsC;AACtC,wCAAwC,eAAe;AACvD,kEAAkE,cAAc,2BAA2B,mBAAmB;AAC9H;AACA;AACA,iCAAiC,gCAAgC,oBAAoB;AACrF,mCAAmC,oBAAoB;AACvD,kEAAkE,2BAA2B,4BAA4B,cAAc,gBAAgB,iBAAiB,WAAW,eAAe,qBAAqB,yBAAyB,aAAa;AAC7P,cAAc;AACd;AACA,mEAAmE,2BAA2B,mBAAmB,oBAAoB,mBAAmB,gBAAgB,iBAAiB,WAAW,aAAa;AACjN;AACA;AACA,kEAAkE,2BAA2B,4BAA4B,cAAc,gBAAgB,iBAAiB,WAAW,eAAe,qBAAqB,yBAAyB,aAAa;AAC7P,cAAc;AACd;AACA;AACA,4DAA4D,cAAc,oBAAoB,mBAAmB,cAAc,gBAAgB;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU,GAAG,WAAW,GAAG,SAAS;AACnE,6BAA6B,QAAQ,GAAG,SAAS,GAAG,OAAO;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK,GAAG,MAAM,GAAG,IAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM,GAAG,IAAI,GAAG,KAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,mBAAmB,UAAU,iBAAiB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sCAAsC,gCAAgC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC,I","sources":["webpack://thread2audio/./src/contentScript.js"],"sourcesContent":["// Google Week by Week Search Extension\n// Adds functionality to search Google results one week at a time\n\n// Main entry point for the content script\n(function() {\n  'use strict';\n  \n  // Configuration\n  const config = {\n    calendarIconSize: '20px',\n    calendarIconColor: '#5f6368', // Google's gray color\n    activeIconColor: '#1a73e8', // Google's blue color\n    datePickerWidth: '300px',\n    animationDuration: '0.2s'\n  };\n  \n  // Global state\n  let isDatePickerVisible = false;\n  let selectedStartDate = null;\n  let selectedEndDate = null;\n  \n  /**\n   * Initialize the extension\n   */\n  function init() {\n    console.log('Initializing Google Week by Week extension');\n    \n    // Check if we're on a Google search results page\n    if (isGoogleSearchPage()) {\n      initializeWeekByWeekSearch();\n    }\n    \n    // Listen for page navigation (for SPA behavior)\n    observeUrlChanges();\n  }\n  \n  /**\n   * Check if the current page is a Google search page\n   */\n  function isGoogleSearchPage() {\n    return window.location.hostname.includes('google') && \n           (window.location.pathname === '/search' || window.location.pathname === '/');\n  }\n  \n  /**\n   * Initialize the week by week search functionality\n   */\n  function initializeWeekByWeekSearch() {\n    // Create and inject the calendar icon\n    injectCalendarIcon();\n    \n    // Create the date picker component (initially hidden)\n    createDatePickerElement();\n    \n    // Check URL for existing date parameters and set them if present\n    checkForExistingDateParams();\n    \n    // Add event listeners\n    addEventListeners();\n  }\n  \n  /**\n   * Create and inject the calendar icon into the Google search bar\n   */\n  function injectCalendarIcon() {\n    // Remove any existing calendar icon first\n    removeExistingCalendarIcon();\n    \n    // Find the search form - there are a few possible selectors to try\n    const searchForm = document.querySelector('form[role=\"search\"], form#tsf, form.search-form');\n    \n    if (!searchForm) {\n      console.error('Google Week by Week: Could not find the search form');\n      return;\n    }\n    \n    // Create the calendar icon element\n    const calendarIcon = document.createElement('div');\n    calendarIcon.id = 'gwbw-calendar-icon';\n    calendarIcon.className = 'gwbw-calendar-icon';\n    calendarIcon.innerHTML = createCalendarIconSVG();\n    calendarIcon.title = 'Search by week';\n    \n    // Add styles to the icon\n    calendarIcon.style.cssText = `\n      cursor: pointer;\n      width: ${config.calendarIconSize};\n      height: ${config.calendarIconSize};\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      padding: 4px;\n      border-radius: 50%;\n      transition: background-color 0.2s;\n      vertical-align: middle;\n      position: relative;\n      top: 6px;\n    `;\n    \n    // Find the right spot to insert the icon\n    // Usually next to the search button or inside the search input container\n    const searchButton = searchForm.querySelector('button[type=\"submit\"], button[aria-label=\"Google Search\"]');\n    \n    if (searchButton && searchButton.parentNode) {\n      searchButton.parentNode.insertBefore(calendarIcon, searchButton);\n      searchButton.parentNode.parentNode.style.alignItems = 'center'; // Align items in the search form\n      searchButton.parentNode.parentNode.style.verticalAlign = 'middle'; // Align items in the search form\n    } else {\n      // Fallback to append to the form\n      searchForm.appendChild(calendarIcon);\n    }\n    \n    console.log('Calendar icon injected');\n  }\n  \n  /**\n   * Create the SVG for the calendar icon\n   */\n  function createCalendarIconSVG() {\n    return `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${config.calendarIconSize}\" height=\"${config.calendarIconSize}\" \n        viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"${config.calendarIconColor}\" \n        stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n        <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\n        <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\n        <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\n      </svg>\n    `;\n  }\n  \n  /**\n   * Remove any existing calendar icon to avoid duplicates\n   */\n  function removeExistingCalendarIcon() {\n    const existingIcon = document.getElementById('gwbw-calendar-icon');\n    if (existingIcon) {\n      existingIcon.remove();\n    }\n  }\n  \n  /**\n   * Create the date picker element that will appear when clicking the calendar icon\n   */\n  function createDatePickerElement() {\n    // Remove any existing date picker first\n    removeExistingDatePicker();\n    \n    // Create the date picker container\n    const datePicker = document.createElement('div');\n    datePicker.id = 'gwbw-date-picker';\n    datePicker.className = 'gwbw-date-picker';\n    \n    // Add styles to the date picker\n    datePicker.style.cssText = `\n      position: absolute;\n      z-index: 9999;\n      background: white;\n      border-radius: 8px;\n      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n      padding: 16px;\n      width: ${config.datePickerWidth};\n      display: none;\n      opacity: 0;\n      transition: opacity ${config.animationDuration} ease-in-out;\n      font-family: Arial, sans-serif;\n    `;\n    \n    // Create the content for the date picker\n    datePicker.innerHTML = `\n      <div style=\"margin-bottom: 16px; font-weight: bold; color: #202124;\">\n        Search by Week\n      </div>\n      \n      <div style=\"margin-bottom: 16px;\">\n        <div style=\"margin-bottom: 8px; color: #5f6368;\">Start Date</div>\n        <input type=\"date\" id=\"gwbw-start-date\" style=\"width: 100%; padding: 8px; border: 1px solid #dfe1e5; border-radius: 4px;\">\n      </div>\n      \n      <div style=\"margin-bottom: 16px;\">\n        <div style=\"margin-bottom: 8px; color: #5f6368;\">End Date</div>\n        <input type=\"date\" id=\"gwbw-end-date\" style=\"width: 100%; padding: 8px; border: 1px solid #dfe1e5; border-radius: 4px;\">\n      </div>\n      \n      <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n        <div style=\"display: flex; align-items: center;\">\n          <button id=\"gwbw-prev-week\" style=\"background: #f8f9fa; border: 1px solid #dadce0; border-radius: 4px 0 0 4px; padding: 8px; color: #3c4043; cursor: pointer; margin: 0; display: flex; align-items: center; justify-content: center; height: 36px;\">\n            ${createArrowSVG('left')}\n          </button>\n          <button id=\"gwbw-quick-week\" style=\"background: #f8f9fa; border: 1px solid #dadce0; border-left: none; border-right: none; padding: 8px 16px; color: #3c4043; cursor: pointer; margin: 0; height: 36px;\">\n            Current Week\n          </button>\n          <button id=\"gwbw-next-week\" style=\"background: #f8f9fa; border: 1px solid #dadce0; border-radius: 0 4px 4px 0; padding: 8px; color: #3c4043; cursor: pointer; margin: 0; display: flex; align-items: center; justify-content: center; height: 36px;\">\n            ${createArrowSVG('right')}\n          </button>\n        </div>\n        <button id=\"gwbw-apply\" style=\"background: #1a73e8; border: none; border-radius: 4px; padding: 8px 16px; color: white; cursor: pointer;\">Apply</button>\n      </div>\n    `;\n    \n    // Add the date picker to the document body\n    document.body.appendChild(datePicker);\n    \n    console.log('Date picker created (initially hidden)');\n  }\n  \n  /**\n   * Remove any existing date picker to avoid duplicates\n   */\n  function removeExistingDatePicker() {\n    const existingPicker = document.getElementById('gwbw-date-picker');\n    if (existingPicker) {\n      existingPicker.remove();\n    }\n  }\n  \n  /**\n   * Show the date picker positioned near the calendar icon\n   */\n  function showDatePicker() {\n    const datePicker = document.getElementById('gwbw-date-picker');\n    const calendarIcon = document.getElementById('gwbw-calendar-icon');\n    \n    if (!datePicker || !calendarIcon) {\n      console.error('Date picker or calendar icon not found');\n      return;\n    }\n    \n    // Get the position of the calendar icon\n    const iconRect = calendarIcon.getBoundingClientRect();\n    \n    // Position the date picker below the icon\n    datePicker.style.top = (iconRect.bottom + window.scrollY + 8) + 'px';\n    datePicker.style.left = (iconRect.left + window.scrollX - 150) + 'px'; // Center the picker\n    \n    // Show the date picker with animation\n    datePicker.style.display = 'block';\n    \n    // Trigger reflow\n    datePicker.offsetHeight;\n    \n    // Make it visible\n    datePicker.style.opacity = '1';\n    \n    isDatePickerVisible = true;\n    updateCalendarIconState(true);\n  }\n  \n  /**\n   * Hide the date picker\n   */\n  function hideDatePicker() {\n    const datePicker = document.getElementById('gwbw-date-picker');\n    \n    if (!datePicker) {\n      return;\n    }\n    \n    // Hide with animation\n    datePicker.style.opacity = '0';\n    \n    // Wait for animation to complete before removing from DOM\n    setTimeout(() => {\n      datePicker.style.display = 'none';\n    }, parseFloat(config.animationDuration) * 1000);\n    \n    isDatePickerVisible = false;\n    updateCalendarIconState(false);\n  }\n  \n  /**\n   * Update the calendar icon's visual state (active or inactive)\n   */\n  function updateCalendarIconState(isActive) {\n    const calendarIcon = document.getElementById('gwbw-calendar-icon');\n    if (!calendarIcon) return;\n    \n    // Update the SVG color based on active state\n    const svg = calendarIcon.querySelector('svg');\n    if (svg) {\n      svg.setAttribute('stroke', isActive ? config.activeIconColor : config.calendarIconColor);\n    }\n    \n    // Update the background color\n    calendarIcon.style.backgroundColor = isActive ? 'rgba(26, 115, 232, 0.1)' : '';\n  }\n  \n  /**\n   * Check for existing date parameters in the URL and set the date picker values\n   */\n  function checkForExistingDateParams() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const tbs = urlParams.get('tbs');\n    \n    if (tbs) {\n      // Parse the tbs parameter to extract date ranges\n      // The format is usually \"cdr:1,cd_min:MM/DD/YYYY,cd_max:MM/DD/YYYY\"\n      const match = tbs.match(/cd_min:(\\d+)\\/(\\d+)\\/(\\d+),cd_max:(\\d+)\\/(\\d+)\\/(\\d+)/);\n      \n      if (match) {\n        // Convert MM/DD/YYYY to YYYY-MM-DD for input[type=date]\n        const startMonth = match[1].padStart(2, '0');\n        const startDay = match[2].padStart(2, '0');\n        const startYear = match[3];\n        \n        const endMonth = match[4].padStart(2, '0');\n        const endDay = match[5].padStart(2, '0');\n        const endYear = match[6];\n        \n        selectedStartDate = `${startYear}-${startMonth}-${startDay}`;\n        selectedEndDate = `${endYear}-${endMonth}-${endDay}`;\n        \n        // Update the input fields when they become available\n        setTimeout(() => {\n          const startDateInput = document.getElementById('gwbw-start-date');\n          const endDateInput = document.getElementById('gwbw-end-date');\n          \n          if (startDateInput) startDateInput.value = selectedStartDate;\n          if (endDateInput) endDateInput.value = selectedEndDate;\n        }, 100);\n        \n        // Visual indicator that date filter is active\n        updateCalendarIconState(true);\n      }\n    }\n  }\n  \n  /**\n   * Add event listeners for the calendar icon and date picker\n   */\n  function addEventListeners() {\n    // Handle calendar icon click\n    document.addEventListener('click', function(e) {\n      // Click on calendar icon toggles the date picker\n      if (e.target.closest('#gwbw-calendar-icon')) {\n        if (isDatePickerVisible) {\n          hideDatePicker();\n        } else {\n          showDatePicker();\n        }\n        e.stopPropagation();\n      }\n      // Clicking outside the date picker closes it\n      else if (isDatePickerVisible && !e.target.closest('#gwbw-date-picker')) {\n        hideDatePicker();\n      }\n    });\n    \n    // Handle input changes and button clicks in the date picker\n    document.addEventListener('input', function(e) {\n      if (e.target.id === 'gwbw-start-date') {\n        selectedStartDate = e.target.value;\n      } else if (e.target.id === 'gwbw-end-date') {\n        selectedEndDate = e.target.value;\n      }\n    });\n    \n    document.addEventListener('click', function(e) {\n      // Apply button click\n      if (e.target.id === 'gwbw-apply') {\n        applyDateFilter();\n        hideDatePicker();\n      }\n      \n      // Current week button click\n      else if (e.target.id === 'gwbw-quick-week') {\n        setCurrentWeek();\n      }\n      \n      // Previous week button click\n      else if (e.target.closest('#gwbw-prev-week')) {\n        setPreviousWeek();\n      }\n      \n      // Next week button click\n      else if (e.target.closest('#gwbw-next-week')) {\n        setNextWeek();\n      }\n    });\n  }\n  \n  /**\n   * Set the date range to the current week (Sunday to Saturday)\n   */\n  function setCurrentWeek() {\n    const today = new Date();\n    const currentDay = today.getDay(); // 0 = Sunday, 6 = Saturday\n    \n    // Calculate the date for the Sunday of this week\n    const sundayDate = new Date(today);\n    sundayDate.setDate(today.getDate() - currentDay);\n    \n    // Calculate the date for the Saturday of this week\n    const saturdayDate = new Date(today);\n    saturdayDate.setDate(today.getDate() + (6 - currentDay));\n    \n    // Format dates as YYYY-MM-DD\n    selectedStartDate = formatDateForInput(sundayDate);\n    selectedEndDate = formatDateForInput(saturdayDate);\n    \n    // Update the input fields\n    const startDateInput = document.getElementById('gwbw-start-date');\n    const endDateInput = document.getElementById('gwbw-end-date');\n    \n    if (startDateInput) startDateInput.value = selectedStartDate;\n    if (endDateInput) endDateInput.value = selectedEndDate;\n  }\n  \n  /**\n   * Set the date range to the previous week based on current selection\n   */\n  function setPreviousWeek() {\n    // If no dates are selected, start with current week\n    if (!selectedStartDate || !selectedEndDate) {\n      setCurrentWeek();\n      return;\n    }\n    \n    // Create date objects from the current selection\n    const startDate = new Date(selectedStartDate);\n    const endDate = new Date(selectedEndDate);\n    \n    // Move both dates back by 7 days\n    startDate.setDate(startDate.getDate() - 7);\n    endDate.setDate(endDate.getDate() - 7);\n    \n    // Update the selected dates\n    selectedStartDate = formatDateForInput(startDate);\n    selectedEndDate = formatDateForInput(endDate);\n    \n    // Update the input fields\n    const startDateInput = document.getElementById('gwbw-start-date');\n    const endDateInput = document.getElementById('gwbw-end-date');\n    \n    if (startDateInput) startDateInput.value = selectedStartDate;\n    if (endDateInput) endDateInput.value = selectedEndDate;\n  }\n  \n  /**\n   * Set the date range to the next week based on current selection\n   */\n  function setNextWeek() {\n    // If no dates are selected, start with current week\n    if (!selectedStartDate || !selectedEndDate) {\n      setCurrentWeek();\n      return;\n    }\n    \n    // Create date objects from the current selection\n    const startDate = new Date(selectedStartDate);\n    const endDate = new Date(selectedEndDate);\n    \n    // Move both dates forward by 7 days\n    startDate.setDate(startDate.getDate() + 7);\n    endDate.setDate(endDate.getDate() + 7);\n    \n    // Update the selected dates\n    selectedStartDate = formatDateForInput(startDate);\n    selectedEndDate = formatDateForInput(endDate);\n    \n    // Update the input fields\n    const startDateInput = document.getElementById('gwbw-start-date');\n    const endDateInput = document.getElementById('gwbw-end-date');\n    \n    if (startDateInput) startDateInput.value = selectedStartDate;\n    if (endDateInput) endDateInput.value = selectedEndDate;\n  }\n  \n  /**\n   * Create arrow SVG for navigation buttons\n   */\n  function createArrowSVG(direction) {\n    const points = direction === 'left' ?\n      \"10,5 3,12 10,19\" :  // Left arrow\n      \"4,5 11,12 4,19\";    // Right arrow\n      \n    return `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"24\" \n        viewBox=\"0 0 14 24\" fill=\"none\" stroke=\"currentColor\" \n        stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <polyline points=\"${points}\"></polyline>\n      </svg>\n    `;\n  }\n  \n  /**\n   * Format a Date object as YYYY-MM-DD for input[type=date]\n   */\n  function formatDateForInput(date) {\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n  \n  /**\n   * Format a Date object as MM/DD/YYYY for Google's URL parameters\n   */\n  function formatDateForGoogle(dateStr) {\n    const date = new Date(dateStr);\n    const month = (date.getMonth() + 1).toString();\n    const day = date.getDate().toString();\n    const year = date.getFullYear();\n    return `${month}/${day}/${year}`;\n  }\n  \n  /**\n   * Apply the date filter by modifying the search URL\n   */\n  function applyDateFilter() {\n    if (!selectedStartDate || !selectedEndDate) {\n      console.error('Start and end dates must be selected');\n      return;\n    }\n    \n    // Get the current URL and parameters\n    const url = new URL(window.location.href);\n    const urlParams = new URLSearchParams(url.search);\n    \n    // Format dates for Google's URL parameters\n    const startDateFormatted = formatDateForGoogle(selectedStartDate);\n    const endDateFormatted = formatDateForGoogle(selectedEndDate);\n    \n    // Set the tbs parameter for date range\n    // Format: cdr:1,cd_min:MM/DD/YYYY,cd_max:MM/DD/YYYY\n    urlParams.set('tbs', `cdr:1,cd_min:${startDateFormatted},cd_max:${endDateFormatted}`);\n    \n    // Update the URL with the new parameters\n    url.search = urlParams.toString();\n    \n    // Navigate to the new URL\n    window.location.href = url.toString();\n  }\n  \n  /**\n   * Observe URL changes to re-initialize the extension when navigating\n   * between Google Search pages (handles AJAX navigation)\n   */\n  function observeUrlChanges() {\n    let lastUrl = location.href;\n    \n    // Create an observer instance\n    const observer = new MutationObserver(function() {\n      if (location.href !== lastUrl) {\n        lastUrl = location.href;\n        if (isGoogleSearchPage()) {\n          console.log('URL changed to a Google search page, reinitializing');\n          setTimeout(initializeWeekByWeekSearch, 500);\n        }\n      }\n    });\n    \n    // Start observing\n    observer.observe(document.body, { childList: true, subtree: true });\n    \n    // Also listen for popstate events for browser back/forward\n    window.addEventListener('popstate', function() {\n      if (isGoogleSearchPage()) {\n        setTimeout(initializeWeekByWeekSearch, 500);\n      }\n    });\n  }\n  \n  // Initialize the extension after the page has loaded\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n  } else {\n    init();\n  }\n})();"],"names":[],"sourceRoot":""}