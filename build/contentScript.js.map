{"version":3,"file":"contentScript.js","mappings":";;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,MAAM,QAAQ,YAAY;AAC3E;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,cAAc,MAAM,aAAa,KAAK,kBAAkB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,YAAY;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,6CAA6C,YAAY;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,SAAS,YAAY,SAAS;AACrF,kDAAkD,yBAAyB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,6CAA6C,8BAA8B;AAC3E,iBAAiB;AACjB,eAAe;AACf;AACA;AACA,4BAA4B,0BAA0B;AACtD,qBAAqB;AACrB,mBAAmB;AACnB,eAAe;AACf,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,8CAA8C,mBAAmB,SAAS,WAAW;AACxH,iBAAiB,+EAA+E;AAChG;AACA;AACA,mCAAmC,6CAA6C;AAChF,wCAAwC,SAAS,qBAAqB,aAAa,UAAU;AAC7F,oEAAoE,WAAW;AAC/E,oBAAoB,cAAc,oBAAoB,cAAc,oBAAoB,cAAc,UAAU,SAAS,WAAW;AACpI;AACA;AACA,mCAAmC,6CAA6C;AAChF,wCAAwC,SAAS,qBAAqB,aAAa,UAAU;AAC7F,kEAAkE,WAAW;AAC7E,oBAAoB,cAAc,oBAAoB,cAAc,oBAAoB,cAAc,UAAU,SAAS,WAAW;AACpI;AACA;AACA,iCAAiC,gCAAgC,oBAAoB;AACrF,mCAAmC,oBAAoB;AACvD,2DAA2D,gBAAgB,oBAAoB;AAC/F,wCAAwC,cAAc,SAAS,kBAAkB,iBAAiB;AAClG,2BAA2B,qBAAqB,yBAAyB,UAAU,cAAc;AACjG,cAAc;AACd;AACA,4DAA4D,gBAAgB,oBAAoB;AAChG,+BAA+B,oBAAoB,WAAW;AAC9D,qBAAqB,kBAAkB,iBAAiB,WAAW,UAAU,eAAe,aAAa,UAAU;AACnH;AACA;AACA,2DAA2D,gBAAgB,oBAAoB;AAC/F,wCAAwC,cAAc,SAAS,kBAAkB,iBAAiB;AAClG,2BAA2B,qBAAqB,yBAAyB,UAAU,cAAc;AACjG,cAAc;AACd;AACA;AACA,qDAAqD,cAAc,cAAc;AACjF,qBAAqB,gBAAgB,cAAc,iBAAiB,UAAU,eAAe,aAAa,UAAU;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU,GAAG,WAAW,GAAG,SAAS;AACrE,+BAA+B,QAAQ,GAAG,SAAS,GAAG,OAAO;AAC7D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK,GAAG,MAAM,GAAG,IAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM,GAAG,IAAI,GAAG,KAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mBAAmB,UAAU,iBAAiB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,aAAa,QAAQ,oBAAoB,SAAS,iBAAiB;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,EAAE,IAAI,EAAE,IAAI,EAAE;AACtE;AACA;AACA,oBAAoB,UAAU,QAAQ,oBAAoB,QAAQ,iBAAiB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM,GAAG,IAAI,GAAG,KAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK,GAAG,MAAM,GAAG,IAAI;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sCAAsC,gCAAgC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC,I","sources":["webpack://thread2audio/./src/contentScript.js"],"sourcesContent":["// Week by Week Search Extension\n// Adds functionality to search Google, YouTube and Twitter results one week at a time\n\n// Main entry point for the content script\n(function() {\n  'use strict';\n  \n  // Configuration\n  const config = {\n    calendarIconSize: '20px',\n    calendarIconColor: '#5f6368', // Default gray color\n    activeIconColor: '#1a73e8', // Default blue color\n    datePickerWidth: '300px',\n    animationDuration: '0.2s',\n    // Initialization configuration\n    initDelay: {\n      google: 100,   // Google loads quickly\n      youtube: 2000, // YouTube needs more time for SPA to render\n      twitter: 1500  // Twitter also needs time for SPA to render\n    },\n    maxRetries: 3,   // Maximum number of retries when searching for elements\n    retryDelay: 1500, // Delay between retries in milliseconds\n    // Site-specific configurations\n    sites: {\n      google: {\n        activeIconColor: '#1a73e8', // Google blue\n        searchFormSelector: 'form[role=\"search\"], form#tsf, form.search-form',\n        searchButtonSelector: 'button[type=\"submit\"], button[aria-label=\"Google Search\"]',\n        urlParam: 'tbs',\n        iconSize: '20px' // Default icon size for Google\n      },\n      twitter: {\n        activeIconColor: '#1DA1F2', // Twitter blue\n        searchFormSelector: 'button[aria-label=\"More\"]',\n        searchButtonSelector: 'button[aria-label=\"More\"]',\n        urlParam: 'since',\n        iconSize: '24px' // Bigger icon size for Twitter\n      }\n    }\n  };\n  \n  // Global state\n  let isDatePickerVisible = false;\n  let selectedStartDate = null;\n  let selectedEndDate = null;\n  let currentSite = null;\n  let initAttempts = 0;\n  \n  /**\n   * Initialize the extension\n   */\n  function init() {\n    console.log('Initializing Week by Week Search extension');\n    \n    // Detect which site we're on\n    currentSite = detectSite();\n    \n    // Only proceed if we're on a supported site\n    if (currentSite) {\n      // Get site-specific delay\n      const delay = config.initDelay[currentSite] || 500;\n      console.log(`Delaying initialization for ${delay}ms on ${currentSite}`);\n      \n      // Delay initialization to ensure page has fully loaded\n      setTimeout(() => {\n        initializeWeekByWeekSearch();\n      }, delay);\n    }\n    \n    // Listen for page navigation (for SPA behavior)\n    observeUrlChanges();\n  }\n  \n  /**\n   * Detect which site we're currently on\n   */\n  function detectSite() {\n    const hostname = window.location.hostname.toLowerCase();\n    \n    if (hostname.includes('google') && \n        (window.location.pathname === '/search' || window.location.pathname === '/')) {\n      return 'google';\n    } \n    else if (hostname.includes('twitter') || hostname.includes('x.com')) {\n      return 'twitter';\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Initialize the week by week search functionality\n   */\n  function initializeWeekByWeekSearch() {\n    // Reset attempt counter\n    initAttempts = 0;\n    \n    // Try to inject the calendar icon (with retry mechanism)\n    tryInjectCalendarIcon();\n    \n    // Create the date picker component (initially hidden)\n    createDatePickerElement();\n    \n    // Check URL for existing date parameters and set them if present\n    checkForExistingDateParams();\n    \n    // Add event listeners\n    addEventListeners();\n  }\n  \n  /**\n   * Try to inject the calendar icon with retry mechanism\n   */\n  function tryInjectCalendarIcon() {\n    // Remove any existing calendar icon first\n    removeExistingCalendarIcon();\n    \n    if (!currentSite) return;\n    \n    // Try to inject the calendar icon\n    const success = injectCalendarIcon();\n    \n    // If not successful and we haven't reached max retries, try again\n    if (!success && initAttempts < config.maxRetries) {\n      initAttempts++;\n      console.log(`Retry attempt ${initAttempts} for ${currentSite} in ${config.retryDelay}ms`);\n      setTimeout(tryInjectCalendarIcon, config.retryDelay);\n    }\n  }\n  \n  /**\n   * Create and inject the calendar icon into the site's search bar\n   * @returns {boolean} Whether injection was successful\n   */\n  function injectCalendarIcon() {\n    if (!currentSite) return false;\n    \n    // Get site-specific selectors\n    const siteConfig = config.sites[currentSite];\n    \n    // Find the search form using the site-specific selector\n    let searchForm = document.querySelector(siteConfig.searchFormSelector);\n    \n    // Special handling for different sites\n    if (currentSite === 'twitter') {\n      searchForm = searchForm ? searchForm.parentNode : null;\n    }\n    \n    console.log(searchForm);\n    if (!searchForm) {\n      console.error(`Week by Week: Could not find the search form on ${currentSite}`);\n      return false;\n    }\n    \n    // Create the calendar icon element\n    const calendarIcon = document.createElement('div');\n    calendarIcon.id = 'gwbw-calendar-icon';\n    calendarIcon.className = 'gwbw-calendar-icon';\n    calendarIcon.innerHTML = createCalendarIconSVG();\n    calendarIcon.title = 'Search by week';\n    \n    // Get site-specific icon size if available\n    const iconSize = siteConfig.iconSize || config.calendarIconSize;\n\n    // Add styles to the icon, with some site-specific adjustments\n    calendarIcon.style.cssText = `\n      cursor: pointer;\n      width: ${iconSize};\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      padding: 4px;\n      border-radius: 50%;\n      transition: background-color 0.2s;\n      vertical-align: middle;\n      position: relative;\n      z-index: 1000;\n      pointer-events: auto;\n    `;\n    \n    // Find the right spot to insert the icon based on the site\n    let searchButton = null;\n    \n    if (searchForm) {\n      searchButton = searchForm.querySelector(siteConfig.searchButtonSelector);\n    }\n    \n    if (currentSite === 'twitter') {\n      // For Twitter, position icon adjacent to the search input\n      // First try to find the search input container\n      const searchContainer = searchForm ? searchForm.parentNode : null;\n      if (searchContainer) {\n        // Reset previous styling\n        calendarIcon.style.position = 'absolute';\n        calendarIcon.style.right = '45px';\n        calendarIcon.style.top = '50%';\n        calendarIcon.style.transform = 'translateY(-50%)';\n        calendarIcon.style.zIndex = '2000';\n        \n        // If searchForm is direct input, we need to work with its parent\n        searchContainer.style.position = 'relative';\n        \n        if (calendarIcon.parentNode !== searchContainer) {\n          // Move the icon to be a child of the search container for better positioning\n          searchContainer.appendChild(calendarIcon);\n        }\n      }\n    } else {\n      // Standard positioning for Google and other sites\n      if (searchButton && searchButton.parentNode) {\n        searchButton.parentNode.insertBefore(calendarIcon, searchButton);\n      } else if (searchForm) {\n        // Fallback to append to the form\n        searchForm.appendChild(calendarIcon);\n      }\n    }\n    \n    console.log(`Calendar icon injected on ${currentSite}`);\n    return true;\n  }\n  \n  /**\n   * Create the SVG for the calendar icon\n   */\n  function createCalendarIconSVG() {\n    // Get site-specific icon size if available\n    const iconSize = currentSite && config.sites[currentSite].iconSize ? \n      config.sites[currentSite].iconSize : config.calendarIconSize;\n      \n    return `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${iconSize}\" height=\"${iconSize}\" \n        viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"${config.calendarIconColor}\" \n        stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n        <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\n        <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\n        <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\n      </svg>\n    `;\n  }\n  \n  /**\n   * Remove any existing calendar icon to avoid duplicates\n   */\n  function removeExistingCalendarIcon() {\n    const existingIcon = document.getElementById('gwbw-calendar-icon');\n    if (existingIcon) {\n      existingIcon.remove();\n    }\n  }\n  \n  /**\n   * Detect Twitter's theme (dark or light)\n   * @returns {string} 'dark' or 'light'\n   */\n  function detectTwitterTheme() {\n    // Check if we're on Twitter\n    if (currentSite !== 'twitter') {\n      return 'light'; // Default to light for non-Twitter sites\n    }\n    \n    // Method 1: Check for dark mode by looking at the background color\n    const bodyBgColor = window.getComputedStyle(document.body).backgroundColor;\n    \n    // Convert RGB to brightness\n    if (bodyBgColor) {\n      const rgb = bodyBgColor.match(/\\d+/g);\n      if (rgb && rgb.length >= 3) {\n        // Calculate brightness (simple formula: (R+G+B)/3)\n        const brightness = (parseInt(rgb[0]) + parseInt(rgb[1]) + parseInt(rgb[2])) / 3;\n        if (brightness < 128) {\n          return 'dark';\n        }\n      }\n    }\n    \n    // Method 2: Look for dark theme indicators in classes or attributes\n    const darkThemeIndicator = document.documentElement.getAttribute('data-theme') === 'dark' ||\n                               document.body.classList.contains('dark') ||\n                               document.querySelector('[data-nightmode=\"true\"]');\n                               \n    if (darkThemeIndicator) {\n      return 'dark';\n    }\n    \n    // Default to light theme if no dark indicators found\n    return 'light';\n  }\n\n  /**\n   * Create the date picker element that will appear when clicking the calendar icon\n   */\n  function createDatePickerElement() {\n    // Remove any existing date picker first\n    removeExistingDatePicker();\n    \n    // Create the date picker container\n    const datePicker = document.createElement('div');\n    datePicker.id = 'gwbw-date-picker';\n    datePicker.className = 'gwbw-date-picker';\n    \n    // Get theme for Twitter\n    const twitterTheme = currentSite === 'twitter' ? detectTwitterTheme() : 'light';\n    const isTwitterDark = twitterTheme === 'dark';\n    \n    // Set colors based on theme\n    const bgColor = isTwitterDark && currentSite === 'twitter' ? '#000' : 'white';\n    const textColor = isTwitterDark && currentSite === 'twitter' ? '#e7e9ea' : '#202124';\n    const borderColor = isTwitterDark && currentSite === 'twitter' ? '#333' : '#dfe1e5';\n    const secondaryTextColor = isTwitterDark && currentSite === 'twitter' ? '#8899a6' : '#5f6368';\n    const buttonBgColor = isTwitterDark && currentSite === 'twitter' ? '#192734' : '#f8f9fa';\n    const buttonTextColor = isTwitterDark && currentSite === 'twitter' ? '#e7e9ea' : '#3c4043';\n    \n    // Set sizes for Twitter\n    const fontSize = currentSite === 'twitter' ? '13px' : '14px';\n    const inputHeight = currentSite === 'twitter' ? '32px' : '36px';\n    const buttonHeight = currentSite === 'twitter' ? '30px' : '36px';\n    const buttonPadding = currentSite === 'twitter' ? '6px 12px' : '8px 16px';\n    const datePadding = currentSite === 'twitter' ? '12px' : '16px';\n    \n    // Add styles to the date picker\n    datePicker.style.cssText = `\n      position: absolute;\n      z-index: 9999;\n      background: ${bgColor};\n      border-radius: 8px;\n      box-shadow: 0 2px 10px rgba(0, 0, 0, ${isTwitterDark ? '0.5' : '0.2'});\n      padding: ${datePadding};\n      width: ${config.datePickerWidth};\n      display: none;\n      opacity: 0;\n      transition: opacity ${config.animationDuration} ease-in-out;\n      font-family: ${currentSite === 'twitter' ? '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif' : 'Arial, sans-serif'};\n      font-size: ${fontSize};\n      color: ${textColor};\n      border: 1px solid ${borderColor};\n    `;\n    \n    // Get site-specific accent color\n    const accentColor = currentSite ? config.sites[currentSite].activeIconColor : config.activeIconColor;\n    \n    // Create the content for the date picker\n    datePicker.innerHTML = `\n      <div style=\"margin-bottom: ${currentSite === 'twitter' ? '12px' : '16px'}; font-weight: bold; color: ${textColor};\">\n        Search ${currentSite ? currentSite.charAt(0).toUpperCase() + currentSite.slice(1) : ''} by Week\n      </div>\n      \n      <div style=\"margin-bottom: ${currentSite === 'twitter' ? '12px' : '16px'};\">\n        <div style=\"margin-bottom: 6px; color: ${secondaryTextColor}; font-size: ${fontSize};\">Start Date</div>\n        <input type=\"date\" id=\"gwbw-start-date\" style=\"width: 100%; padding: ${currentSite === 'twitter' ? '6px' : '8px'}; \n          height: ${inputHeight}; border: 1px solid ${borderColor}; border-radius: 4px; background: ${bgColor}; color: ${textColor};\">\n      </div>\n      \n      <div style=\"margin-bottom: ${currentSite === 'twitter' ? '12px' : '16px'};\">\n        <div style=\"margin-bottom: 6px; color: ${secondaryTextColor}; font-size: ${fontSize};\">End Date</div>\n        <input type=\"date\" id=\"gwbw-end-date\" style=\"width: 100%; padding: ${currentSite === 'twitter' ? '6px' : '8px'}; \n          height: ${inputHeight}; border: 1px solid ${borderColor}; border-radius: 4px; background: ${bgColor}; color: ${textColor};\">\n      </div>\n      \n      <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n        <div style=\"display: flex; align-items: center;\">\n          <button id=\"gwbw-prev-week\" style=\"background: ${buttonBgColor}; border: 1px solid ${borderColor}; \n            border-radius: 4px 0 0 4px; padding: 6px; color: ${buttonTextColor}; cursor: pointer; margin: 0; \n            display: flex; align-items: center; justify-content: center; height: ${buttonHeight};\">\n            ${createArrowSVG('left')}\n          </button>\n          <button id=\"gwbw-quick-week\" style=\"background: ${buttonBgColor}; border: 1px solid ${borderColor}; \n            border-left: none; border-right: none; padding: ${buttonPadding}; \n            color: ${buttonTextColor}; cursor: pointer; margin: 0; height: ${buttonHeight}; font-size: ${fontSize};\">\n            Current Week\n          </button>\n          <button id=\"gwbw-next-week\" style=\"background: ${buttonBgColor}; border: 1px solid ${borderColor}; \n            border-radius: 0 4px 4px 0; padding: 6px; color: ${buttonTextColor}; cursor: pointer; margin: 0; \n            display: flex; align-items: center; justify-content: center; height: ${buttonHeight};\">\n            ${createArrowSVG('right')}\n          </button>\n        </div>\n        <button id=\"gwbw-apply\" style=\"background: ${accentColor}; border: none; border-radius: 4px; \n          padding: ${buttonPadding}; color: white; cursor: pointer; height: ${buttonHeight}; font-size: ${fontSize};\">Apply</button>\n      </div>\n    `;\n    \n    // Add the date picker to the document body\n    document.body.appendChild(datePicker);\n    \n    console.log('Date picker created (initially hidden)');\n  }\n  \n  /**\n   * Remove any existing date picker to avoid duplicates\n   */\n  function removeExistingDatePicker() {\n    const existingPicker = document.getElementById('gwbw-date-picker');\n    if (existingPicker) {\n      existingPicker.remove();\n    }\n  }\n  \n  /**\n   * Show the date picker positioned near the calendar icon\n   */\n  function showDatePicker() {\n    const datePicker = document.getElementById('gwbw-date-picker');\n    const calendarIcon = document.getElementById('gwbw-calendar-icon');\n    \n    if (!datePicker || !calendarIcon) {\n      console.error('Date picker or calendar icon not found');\n      return;\n    }\n    \n    // Get the position of the calendar icon\n    const iconRect = calendarIcon.getBoundingClientRect();\n    \n    // Position the date picker below the icon\n    datePicker.style.top = (iconRect.bottom + window.scrollY + 8) + 'px';\n    datePicker.style.left = (iconRect.left + window.scrollX - 150) + 'px'; // Center the picker\n    \n    // Show the date picker with animation\n    datePicker.style.display = 'block';\n    \n    // Trigger reflow\n    datePicker.offsetHeight;\n    \n    // Make it visible\n    datePicker.style.opacity = '1';\n    \n    isDatePickerVisible = true;\n    updateCalendarIconState(true);\n  }\n  \n  /**\n   * Hide the date picker\n   */\n  function hideDatePicker() {\n    const datePicker = document.getElementById('gwbw-date-picker');\n    \n    if (!datePicker) {\n      return;\n    }\n    \n    // Hide with animation\n    datePicker.style.opacity = '0';\n    \n    // Wait for animation to complete before removing from DOM\n    setTimeout(() => {\n      datePicker.style.display = 'none';\n    }, parseFloat(config.animationDuration) * 1000);\n    \n    isDatePickerVisible = false;\n    updateCalendarIconState(false);\n  }\n  \n  /**\n   * Update the calendar icon's visual state (active or inactive)\n   */\n  function updateCalendarIconState(isActive) {\n    const calendarIcon = document.getElementById('gwbw-calendar-icon');\n    if (!calendarIcon) return;\n    \n    // Get site-specific accent color\n    const accentColor = currentSite ? \n      config.sites[currentSite].activeIconColor : config.activeIconColor;\n      \n    // Update the SVG color based on active state\n    const svg = calendarIcon.querySelector('svg');\n    if (svg) {\n      svg.setAttribute('stroke', isActive ? accentColor : config.calendarIconColor);\n    }\n    \n  }\n  \n  /**\n   * Check for existing date parameters in the URL and set the date picker values\n   */\n  function checkForExistingDateParams() {\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    // Different sites use different URL parameter formats\n    if (currentSite === 'google') {\n      const tbs = urlParams.get('tbs');\n      \n      if (tbs) {\n        // Parse the tbs parameter to extract date ranges\n        // Format is usually \"cdr:1,cd_min:MM/DD/YYYY,cd_max:MM/DD/YYYY\"\n        const match = tbs.match(/cd_min:(\\d+)\\/(\\d+)\\/(\\d+),cd_max:(\\d+)\\/(\\d+)\\/(\\d+)/);\n        \n        if (match) {\n          // Convert MM/DD/YYYY to YYYY-MM-DD for input[type=date]\n          const startMonth = match[1].padStart(2, '0');\n          const startDay = match[2].padStart(2, '0');\n          const startYear = match[3];\n          \n          const endMonth = match[4].padStart(2, '0');\n          const endDay = match[5].padStart(2, '0');\n          const endYear = match[6];\n          \n          selectedStartDate = `${startYear}-${startMonth}-${startDay}`;\n          selectedEndDate = `${endYear}-${endMonth}-${endDay}`;\n          \n          updateDateInputsWithDelay();\n        }\n      }\n    } else if (currentSite === 'youtube') {\n      const sp = urlParams.get('sp');\n      \n      // YouTube uses a parameter like sp=CAISBggCEAEYAQ%3D%3D for date filtering\n      // Since this is encoded, we need to check if filter is active by looking at the UI\n      const dateFilterActive = document.querySelector('ytd-search-filter-renderer yt-formatted-string:contains(\"Last hour\"), ytd-search-filter-renderer yt-formatted-string:contains(\"Today\")');\n      \n      if (dateFilterActive || (sp && sp.includes('CAI'))) {\n        // Extract dates from UI or use current week if filter is active but we can't determine dates\n        setCurrentWeek();\n      }\n    } else if (currentSite === 'twitter') {\n      const since = urlParams.get('since');\n      const until = urlParams.get('until');\n      \n      if (since && until) {\n        // Twitter uses since:YYYY-MM-DD until:YYYY-MM-DD format\n        selectedStartDate = since;\n        selectedEndDate = until;\n        \n        updateDateInputsWithDelay();\n      }\n    }\n    \n    // Visual indicator that date filter is active\n    if (selectedStartDate && selectedEndDate) {\n      updateCalendarIconState(true);\n    }\n  }\n  \n  /**\n   * Update date input fields with a delay to ensure they're in the DOM\n   */\n  function updateDateInputsWithDelay() {\n    setTimeout(() => {\n      const startDateInput = document.getElementById('gwbw-start-date');\n      const endDateInput = document.getElementById('gwbw-end-date');\n      \n      if (startDateInput) startDateInput.value = selectedStartDate;\n      if (endDateInput) endDateInput.value = selectedEndDate;\n    }, 100);\n  }\n\n  /**\n   * Add event listeners for the calendar icon and date picker\n   */\n  function addEventListeners() {\n    // Handle calendar icon click\n    document.addEventListener('click', function(e) {\n      // Click on calendar icon toggles the date picker\n      if (e.target.closest('#gwbw-calendar-icon')) {\n        if (isDatePickerVisible) {\n          hideDatePicker();\n        } else {\n          showDatePicker();\n        }\n        e.stopPropagation();\n      }\n      // Clicking outside the date picker closes it\n      else if (isDatePickerVisible && !e.target.closest('#gwbw-date-picker')) {\n        hideDatePicker();\n      }\n    });\n    \n    // Handle input changes and button clicks in the date picker\n    document.addEventListener('input', function(e) {\n      if (e.target.id === 'gwbw-start-date') {\n        selectedStartDate = e.target.value;\n      } else if (e.target.id === 'gwbw-end-date') {\n        selectedEndDate = e.target.value;\n      }\n    });\n    \n    document.addEventListener('click', function(e) {\n      // Apply button click\n      if (e.target.id === 'gwbw-apply') {\n        applyDateFilter();\n        hideDatePicker();\n      }\n      \n      // Current week button click\n      else if (e.target.id === 'gwbw-quick-week') {\n        setCurrentWeek();\n      }\n      \n      // Previous week button click\n      else if (e.target.closest('#gwbw-prev-week')) {\n        setPreviousWeek();\n      }\n      \n      // Next week button click\n      else if (e.target.closest('#gwbw-next-week')) {\n        setNextWeek();\n      }\n    });\n  }\n  \n  /**\n   * Set the date range to the current week (Sunday to Saturday)\n   */\n  function setCurrentWeek() {\n    const today = new Date();\n    const currentDay = today.getDay(); // 0 = Sunday, 6 = Saturday\n    \n    // Calculate the date for the Sunday of this week\n    const sundayDate = new Date(today);\n    sundayDate.setDate(today.getDate() - currentDay);\n    \n    // Calculate the date for the Saturday of this week\n    const saturdayDate = new Date(today);\n    saturdayDate.setDate(today.getDate() + (6 - currentDay));\n    \n    // Format dates as YYYY-MM-DD\n    selectedStartDate = formatDateForInput(sundayDate);\n    selectedEndDate = formatDateForInput(saturdayDate);\n    \n    // Update the input fields\n    const startDateInput = document.getElementById('gwbw-start-date');\n    const endDateInput = document.getElementById('gwbw-end-date');\n    \n    if (startDateInput) startDateInput.value = selectedStartDate;\n    if (endDateInput) endDateInput.value = selectedEndDate;\n  }\n  \n  /**\n   * Set the date range to the previous week based on current selection\n   */\n  function setPreviousWeek() {\n    // If no dates are selected, start with current week\n    if (!selectedStartDate || !selectedEndDate) {\n      setCurrentWeek();\n      return;\n    }\n    \n    // Create date objects from the current selection\n    const startDate = new Date(selectedStartDate);\n    const endDate = new Date(selectedEndDate);\n    \n    // Move both dates back by 7 days\n    startDate.setDate(startDate.getDate() - 7);\n    endDate.setDate(endDate.getDate() - 7);\n    \n    // Update the selected dates\n    selectedStartDate = formatDateForInput(startDate);\n    selectedEndDate = formatDateForInput(endDate);\n    \n    // Update the input fields\n    const startDateInput = document.getElementById('gwbw-start-date');\n    const endDateInput = document.getElementById('gwbw-end-date');\n    \n    if (startDateInput) startDateInput.value = selectedStartDate;\n    if (endDateInput) endDateInput.value = selectedEndDate;\n  }\n  \n  /**\n   * Set the date range to the next week based on current selection\n   */\n  function setNextWeek() {\n    // If no dates are selected, start with current week\n    if (!selectedStartDate || !selectedEndDate) {\n      setCurrentWeek();\n      return;\n    }\n    \n    // Create date objects from the current selection\n    const startDate = new Date(selectedStartDate);\n    const endDate = new Date(selectedEndDate);\n    \n    // Move both dates forward by 7 days\n    startDate.setDate(startDate.getDate() + 7);\n    endDate.setDate(endDate.getDate() + 7);\n    \n    // Update the selected dates\n    selectedStartDate = formatDateForInput(startDate);\n    selectedEndDate = formatDateForInput(endDate);\n    \n    // Update the input fields\n    const startDateInput = document.getElementById('gwbw-start-date');\n    const endDateInput = document.getElementById('gwbw-end-date');\n    \n    if (startDateInput) startDateInput.value = selectedStartDate;\n    if (endDateInput) endDateInput.value = selectedEndDate;\n  }\n  \n  /**\n   * Create arrow SVG for navigation buttons\n   */\n  function createArrowSVG(direction) {\n    const points = direction === 'left' ?\n      \"10,5 3,12 10,19\" :  // Left arrow\n      \"4,5 11,12 4,19\";    // Right arrow\n      \n    return `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"24\" \n        viewBox=\"0 0 14 24\" fill=\"none\" stroke=\"currentColor\" \n        stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <polyline points=\"${points}\"></polyline>\n      </svg>\n    `;\n  }\n  \n  /**\n   * Format a Date object as YYYY-MM-DD for input[type=date]\n   */\n  function formatDateForInput(date) {\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n  \n  /**\n   * Format a Date object as MM/DD/YYYY for Google's URL parameters\n   */\n  function formatDateForGoogle(dateStr) {\n    const date = new Date(dateStr);\n    const month = (date.getMonth() + 1).toString();\n    const day = date.getDate().toString();\n    const year = date.getFullYear();\n    return `${month}/${day}/${year}`;\n  }\n  \n  /**\n   * Apply the date filter by modifying the search URL based on the current site\n   */\n  function applyDateFilter() {\n    if (!selectedStartDate || !selectedEndDate) {\n      console.error('Start and end dates must be selected');\n      return;\n    }\n    \n    // Get the current URL and parameters\n    const url = new URL(window.location.href);\n    const urlParams = new URLSearchParams(url.search);\n    \n    // Format dates for URL parameters (depends on site)\n    const startDateFormatted = formatDateForSite(selectedStartDate);\n    const endDateFormatted = formatDateForSite(selectedEndDate);\n    \n    if (currentSite === 'google') {\n      // Google format: cdr:1,cd_min:MM/DD/YYYY,cd_max:MM/DD/YYYY\n      urlParams.set('tbs', `cdr:1,cd_min:${startDateFormatted},cd_max:${endDateFormatted}`);\n    } \n    else if (currentSite === 'youtube') {\n      // YouTube uses a complex parameter format that's difficult to reproduce\n      // We'll use their search tools directly by adding the query parameter\n      const searchQuery = urlParams.get('search_query') || '';\n      \n      // Convert dates to YYYY-MM-DD format for YouTube\n      const formattedStartDate = formatDateStandardized(selectedStartDate);\n      const formattedEndDate = formatDateStandardized(selectedEndDate);\n      \n      // Add date filter to search query if not already present\n      if (!searchQuery.includes('after:') && !searchQuery.includes('before:')) {\n        urlParams.set('search_query', `${searchQuery} after:${formattedStartDate} before:${formattedEndDate}`.trim());\n      }\n      \n      // Clear any existing filter params that might interfere\n      if (urlParams.has('sp')) {\n        urlParams.delete('sp');\n      }\n    } \n    else if (currentSite === 'twitter') {\n      // Twitter format: since:YYYY-MM-DD until:YYYY-MM-DD\n      // These are typically part of the q parameter\n      const query = urlParams.get('q') || '';\n      \n      // Convert dates to YYYY-MM-DD format\n      const formattedStartDate = formatDateStandardized(selectedStartDate);\n      const formattedEndDate = formatDateStandardized(selectedEndDate);\n      \n      // Remove any existing date filters\n      let newQuery = query.replace(/\\s*(since|until):\\d{4}-\\d{2}-\\d{2}/g, '').trim();\n      \n      // Add the new date filters\n      newQuery = `${newQuery} since:${formattedStartDate} until:${formattedEndDate}`.trim();\n      \n      urlParams.set('q', newQuery);\n    }\n    \n    // Update the URL with the new parameters\n    url.search = urlParams.toString();\n    \n    // Navigate to the new URL\n    window.location.href = url.toString();\n  }\n  \n  /**\n   * Format a date according to the current site's requirements\n   */\n  function formatDateForSite(dateStr) {\n    if (currentSite === 'google') {\n      // Google format: MM/DD/YYYY\n      const date = new Date(dateStr);\n      const month = (date.getMonth() + 1).toString();\n      const day = date.getDate().toString();\n      const year = date.getFullYear();\n      return `${month}/${day}/${year}`;\n    } \n    else if (currentSite === 'youtube' || currentSite === 'twitter') {\n      // YouTube and Twitter use YYYY-MM-DD\n      return formatDateStandardized(dateStr);\n    }\n    \n    // Default format\n    return dateStr;\n  }\n  \n  /**\n   * Format a date string as YYYY-MM-DD\n   */\n  function formatDateStandardized(dateStr) {\n    const date = new Date(dateStr);\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n\n  /**\n   * Observe URL changes to re-initialize the extension when navigating\n   * between supported pages (handles SPA navigation)\n   */\n  function observeUrlChanges() {\n    let lastUrl = location.href;\n    \n    // Create an observer instance\n    const observer = new MutationObserver(function() {\n      if (location.href !== lastUrl) {\n        lastUrl = location.href;\n        currentSite = detectSite();\n        \n        if (currentSite) {\n          console.log(`URL changed to a ${currentSite} page, reinitializing`);\n          setTimeout(initializeWeekByWeekSearch, 500);\n        }\n      }\n    });\n    \n    // Start observing\n    observer.observe(document.body, { childList: true, subtree: true });\n    \n    // Also listen for popstate events for browser back/forward\n    window.addEventListener('popstate', function() {\n      currentSite = detectSite();\n      if (currentSite) {\n        setTimeout(initializeWeekByWeekSearch, 500);\n      }\n    });\n  }\n  \n  // Initialize the extension after the page has loaded\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n  } else {\n    init();\n  }\n})();"],"names":[],"sourceRoot":""}